<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">
    <!-- 阿里巴巴druid配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.passowrd}" />

        <!-- 初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="10" />

        <!-- 配置连接等待超时时间 -->
        <property name="maxWait" value="10000" />

        <!-- 配置检测，关闭不使用连接 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置连接池中连接生存的时间(最小)-->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 连接是否失效 -->
        <property name="testWhileIdle" value="true" />
        <!-- 这里建议配置为TRUE，防止取到的连接不可用，生产环境testOnBorrow，testOnReturn都关闭 -->
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"  value="20" />

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 " />
        <!--  监控统计用的filter:stat  ,日志用的filter:log4j ,防御sql注入的filter:wall -->
        <property name="filters" value="wall" />
        <!-- 如果同时配置了filters和proxyFilters， 是组合关系，并非替换关系,所以可以选择是否配置 -->
        <!-- <property name="proxyFilters"><list><ref bean="logFilter" /></list></property>  -->
    </bean>

    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置Mybatis配置文件 -->
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
        <!-- 配置别名包路径 -->
        <property name="typeAliasesPackage" value="top.duanyd.plantation.entity" />
        <!-- 配置Mapper扫描路径 -->
        <property name="mapperLocations" value="classpath:/mybatis/mapper/*Mapper.xml" />
    </bean>

    <!-- 配置Mapper扫描路径 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="top.duanyd.plantation.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!-- 声明式事务管理 -->
    <!--定义事物管理器，由spring管理事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 容器自动扫描IOC组件  -->
    <context:component-scan base-package="top.duanyd.plantation"></context:component-scan>

    <!-- aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
</beans>